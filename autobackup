#!/usr/bin/python

""" 
 # /opt/autobackup/autobackup --host=10.0.2.6 --type=etc --dest=/tank/backup/test-etc --save=30 
 # /opt/autobackup/autobackup --host=10.0.2.6 --type=raw --dest=/tank/backup/test-raw --save=30 
 # /opt/autobackup/autobackup --host=10.0.2.6 --type=ovz --dest=/tank/backup/10.0.2.6 --save=30 
"""

import sys, os, os.path, subprocess, argparse, datetime, re, shutil, uuid

#######################################################################################################################

def execute_process(*args):
    process = subprocess.Popen(args, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True, cwd='/')
    stdoutdata, stderrdata = process.communicate()
    return process.returncode, stdoutdata, stderrdata

def execute_or_exit(*args):
    returncode, stdoutdata, stderrdata = execute_process(*args)
    if returncode != 0:
        print "fatal error: execute(", args,") failed"
        print "returncode:", returncode
        print "stdout:", stdoutdata
        print "stderr:", stderrdata
        sys.exit(1)
    return stdoutdata, stderrdata

def execute_or_warning(*args):
    returncode, stdoutdata, stderrdata = execute_process(*args)
    if stdoutdata != '' or stderrdata !='':
        print "execute(", args,") failed"
        print "returncode:", returncode
        print "stdout:", stdoutdata
        print "stderr:", stderrdata

def execute(*args):
    returncode, stdoutdata, stderrdata = execute_process(*args)
    if returncode != 0 or stdoutdata != '' or stderrdata !='':
        print "fatal error: execute(", args,") failed"
        print "returncode:", returncode
        print "stdout:", stdoutdata
        print "stderr:", stderrdata
        sys.exit(1)

#######################################################################################################################

def zfs_list_datasets():
    args = 'zfs', 'list', '-H', '-o', 'name,mountpoint'
    stdoutdata, stderrdata = execute_or_exit(*args)
    zfs = dict()
    for line in stdoutdata.split('\n'):
        if line == '':
            continue
        name, mountpoint = line.split('\t')
        zfs[mountpoint] = name
    return zfs

def zfs_list_snapshots(dataset):
    args = 'zfs', 'list', '-t', 'snap', '-H', '-o', 'name'
    stdoutdata, stderrdata = execute_or_exit(*args)
    prefix = dataset + '@'
    snapshots = list()
    for line in stdoutdata.split('\n'):
        if line.startswith(prefix):
            snapshots.append(line)
    return sorted(snapshots, reverse=True)

def zfs_create_snapshot(dataset):
    execute('zfs', 'snapshot', dataset + '@' + datetime.datetime.now().strftime('autobackup.%Y-%m-%d.%H:%M:%S'))

def zfs_delete_snapshot(snapshot):
    execute('zfs', 'destroy', snapshot)

def zfs_delete_old_snapshots(dataset, save):
    for snapshot in zfs_list_snapshots(dataset)[save:]:
        zfs_delete_snapshot(snapshot)

#######################################################################################################################

def vzlist(host):
    args = 'ssh', host, 'vzlist', '-a', '-H', '-o', 'ctid,layout'
    stdoutdata, stderrdata = execute_or_exit(*args)
    containers = dict()
    for line in stdoutdata.split('\n'):
        if line == '': 
            continue
        ctid, layout = line.split()
        containers[ctid]=layout
    return containers

def print_ploop_containers_with_snapshots(host, containers):
    for ctid, layout in containers.items():
        if layout == 'ploop':
            args = 'ssh', host, 'vzctl', 'snapshot-list', ctid, '-H'
            stdoutdata, stderrdata = execute_or_exit(*args)
            stdout = stdoutdata.strip()
            if stdout != '':
                print "container '%s' has active snapshot, can't compact it" % (ctid)

def compact_all_ploop_containers(host, containers):
    for ctid, layout in containers.items():
        if layout == 'ploop':
            execute_or_exit('ssh', host, 'vzctl', 'compact', ctid)

#######################################################################################################################

def create_local_dir(local_dir):
    try:
        os.makedirs(local_dir)
    except OSError: # File exists
        pass

def backup_ploop_container(host, ctid, mountpoint):
    """ https://openvz.org/Ploop/Backup """
    snid = str(uuid.uuid4())
    path = os.path.join('/tmp/autobackup', snid)
    execute('ssh', host, 'mkdir', '-p', path)
    execute_or_exit('ssh', host, 'vzctl', 'snapshot', ctid, '--id', snid, '--skip-suspend', '--skip-config' )
    execute_or_exit('ssh', host, 'vzctl', 'snapshot-mount', ctid, '--id', snid, '--target', path )
    local_dir = os.path.join(mountpoint, ctid)
    create_local_dir(local_dir)
    rsync(host, path + '/', local_dir)
    execute_or_exit('ssh', host, 'vzctl', 'snapshot-umount', ctid, '--id', snid )
    execute_or_exit('ssh', host, 'vzctl', 'snapshot-delete', ctid, '--id', snid )
    execute('ssh', host, 'rmdir', path)

def delete_orphan_backups(containers, mountpoint):
    save_dirs = set(containers.keys())
    save_dirs.add('hardware-node')
    for backup in os.listdir(mountpoint):
        if backup not in save_dirs:
            shutil.rmtree(os.path.join(mountpoint, backup), ignore_errors=True)

def backup_hardware_node(host, mountpoint):
    local_dir = os.path.join(mountpoint, 'hardware-node')
    create_local_dir(local_dir)
    rsync(host, '/etc', local_dir)

def rsync(src_host, src_dir, dest_dir):
    args = 'rsync', '-aqH', '--exclude', '/dev/**', '--exclude', '/proc/**', '--exclude', '/sys/**', \
        '--exclude', '/run/**', '--exclude', '/tmp/**', '--delete-during', '--delete-excluded', \
        '--ignore-errors', '--force', '--numeric-ids', '--timeout=60', src_host+':'+src_dir, dest_dir
    execute_or_warning(*args)

#######################################################################################################################

def raw_backup(host, dataset, mountpoint, save):
    rsync(host, '/', mountpoint)
    zfs_create_snapshot(dataset)
    zfs_delete_old_snapshots(dataset, save)

def etc_backup(host, dataset, mountpoint, save):
    rsync(host, '/etc', mountpoint)
    zfs_create_snapshot(dataset)
    zfs_delete_old_snapshots(dataset, save)

def ovz_backup(host, dataset, mountpoint, save):
    containers = vzlist(host)
    for ctid, layout in containers.items():
        if layout == 'ploop':
            backup_ploop_container(host, ctid, mountpoint)
        else:
            print "container '%s' has unsupported layout type '%s', can't backup it" % ( ctid, layout )
    backup_hardware_node(host, mountpoint)
    delete_orphan_backups(containers, mountpoint)
    zfs_create_snapshot(dataset)
    zfs_delete_old_snapshots(dataset, save)
    print_ploop_containers_with_snapshots(host, containers)
    compact_all_ploop_containers(host, containers)

#######################################################################################################################

def main():
    parser = argparse.ArgumentParser(prog='autobackup')
    parser.add_argument('--host', required=True, help="remote host to backup it on ZFS", metavar='HOST')
    parser.add_argument('--type', required=True, help="remote host type: etc, raw, ovz", metavar='TYPE')
    parser.add_argument('--dest', required=True, help="backup destination on local ZFS", metavar='PATH')
    parser.add_argument('--save', required=True, help="count of saved backup snapshots", metavar='COUNT', type=int)
    args = parser.parse_args()
    if args.save < 1 or args.save > 90:
        raise ValueError("bad --save value, must be between 1 and 90")
    args.dest = os.path.abspath(args.dest)
    zfs = zfs_list_datasets()
    if args.dest not in zfs:
        raise ValueError("bad --dest value, dataset mountpoint must exists")
    if args.type == 'etc':
        etc_backup(host=args.host, dataset=zfs[args.dest], mountpoint=args.dest, save=args.save)
    elif args.type == 'raw':
        raw_backup(host=args.host, dataset=zfs[args.dest], mountpoint=args.dest, save=args.save)
    elif args.type == 'ovz':
        ovz_backup(host=args.host, dataset=zfs[args.dest], mountpoint=args.dest, save=args.save)
    else:
        raise ValueError("unexpected --type value, must be 'etc', 'raw' or 'ovz'")

if __name__=="__main__":
    main()

