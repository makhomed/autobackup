#!/usr/bin/python

"""
 # /opt/autobackup/autobackup --host=example.com --type=etc --dest=/tank/backup/example.com --save=30
 # /opt/autobackup/autobackup --host=example.net --type=raw --dest=/tank/backup/example.net --save=30
 # /opt/autobackup/autobackup --host=example.org --type=ovz --dest=/tank/backup/example.org --save=30
"""

import argparse
import datetime
import os
import os.path
import shutil
import subprocess
import sys
import syslog
import uuid

__author__ = "Gena Makhomed"
__contact__ = "https://github.com/makhomed/autobackup"
__license__ = "GPLv3"
__version__ = "1.0.5"
__date__ = "2018-05-19"


#######################################################################################################################


def execute_process(*args):
    process = subprocess.Popen(args, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True, cwd='/')
    stdoutdata, stderrdata = process.communicate()
    return process.returncode, stdoutdata, stderrdata


def execute_or_exit(*args):
    returncode, stdoutdata, stderrdata = execute_process(*args)
    if returncode != 0:
        print "fatal error: execute(", args, ") failed"
        print "returncode:", returncode
        print "stdout:", stdoutdata
        print "stderr:", stderrdata
        sys.exit(1)
    return stdoutdata, stderrdata


def execute_or_warning(*args):
    returncode, stdoutdata, stderrdata = execute_process(*args)
    if stdoutdata != '' or stderrdata != '':
        print "execute(", args, ") failed"
        print "returncode:", returncode
        print "stdout:", stdoutdata
        print "stderr:", stderrdata


def execute(*args):
    returncode, stdoutdata, stderrdata = execute_process(*args)
    if returncode != 0 or stdoutdata != '' or stderrdata != '':
        print "fatal error: execute(", args, ") failed"
        print "returncode:", returncode
        print "stdout:", stdoutdata
        print "stderr:", stderrdata
        sys.exit(1)


#######################################################################################################################


def zfs_list_datasets():
    args = 'zfs', 'list', '-H', '-o', 'name,mountpoint'
    stdoutdata, dummy_stderrdata = execute_or_exit(*args)
    zfs = dict()
    for line in stdoutdata.split('\n'):
        if line == '':
            continue
        name, mountpoint = line.split('\t')
        zfs[mountpoint] = name
    return zfs


def zfs_list_snapshots(dataset):
    args = 'zfs', 'list', '-t', 'snap', '-H', '-o', 'name'
    stdoutdata, dummy_stderrdata = execute_or_exit(*args)
    prefix = dataset + '@'
    snapshots = list()
    for line in stdoutdata.split('\n'):
        if line.startswith(prefix):
            snapshots.append(line)
    return sorted(snapshots, reverse=True)


def zfs_create_snapshot(dataset):
    execute('zfs', 'snapshot', dataset + '@' + datetime.datetime.now().strftime('autobackup.%Y-%m-%d.%H:%M:%S'))


def zfs_delete_snapshot(snapshot):
    execute('zfs', 'destroy', snapshot)


def zfs_delete_old_snapshots(dataset, save):
    for snapshot in zfs_list_snapshots(dataset)[save:]:
        zfs_delete_snapshot(snapshot)


#######################################################################################################################


def vzlist(host, port):
    args = 'ssh', '-p', str(port), host, 'vzlist', '-a', '-H', '-o', 'ctid,layout'
    stdoutdata, dummy_stderrdata = execute_or_exit(*args)
    containers = dict()
    for line in stdoutdata.split('\n'):
        if line == '':
            continue
        ctid, layout = line.split()
        containers[ctid] = layout
    return containers


def print_containers_with_snapshots(host, port, containers):
    for ctid, layout in containers.items():
        if layout == 'ploop':
            args = 'ssh', '-p', str(port), host, 'vzctl', 'snapshot-list', ctid, '-H'
            stdoutdata, dummy_stderrdata = execute_or_exit(*args)
            stdout = stdoutdata.strip()
            if stdout != '':
                print "container '%s' has active ploop snapshot, can't compact it" % (ctid)


def compact_all_ploop_containers(host, port, containers):
    for ctid, layout in containers.items():
        if layout == 'ploop':
            execute_or_exit('ssh', '-p', str(port), host, 'vzctl', 'compact', ctid)


#######################################################################################################################


def create_local_dir(local_dir):
    try:
        os.makedirs(local_dir)
    except OSError:  # File exists
        pass


def backup_ploop_container(host, port, ctid, mountpoint):
    """ https://openvz.org/Ploop/Backup """
    snid = str(uuid.uuid4())
    path = os.path.join('/tmp/autobackup', snid)
    execute('ssh', '-p', str(port), host, 'mkdir', '-p', path)
    execute_or_exit('ssh', '-p', str(port), host, 'vzctl', 'snapshot', ctid, '--id', snid, '--skip-suspend', '--skip-config')
    execute_or_exit('ssh', '-p', str(port), host, 'vzctl', 'snapshot-mount', ctid, '--id', snid, '--target', path)
    local_dir = os.path.join(mountpoint, ctid)
    create_local_dir(local_dir)
    extra_excludes = get_excludes_from_remote_host(host, port, path, 'container ' + ctid + ' on hardware-node ' + host + ':' + str(port))
    rsync(host, port, path + '/', local_dir, extra_excludes)
    execute_or_exit('ssh', '-p', str(port), host, 'vzctl', 'snapshot-umount', ctid, '--id', snid)
    execute_or_exit('ssh', '-p', str(port), host, 'vzctl', 'snapshot-delete', ctid, '--id', snid)
    execute('ssh', '-p', str(port), host, 'rmdir', path)


def delete_orphan_backups(containers, mountpoint):
    save_dirs = set(containers.keys())
    save_dirs.add('hardware-node')
    for backup in os.listdir(mountpoint):
        if backup not in save_dirs:
            shutil.rmtree(os.path.join(mountpoint, backup), ignore_errors=True)


def backup_hardware_node(host, port, mountpoint):
    local_dir = os.path.join(mountpoint, 'hardware-node')
    create_local_dir(local_dir)
    extra_excludes = get_excludes_from_remote_host(host, port, None, 'hardware-node ' + host + ':' + str(port))
    rsync(host, port, '/etc', local_dir, extra_excludes)


BUILT_IN_EXCLUDES_CONFIG = """
/dev/**
/proc/**
/sys/**
/run/**
/tmp/**
/var/cache/**
/var/tmp/**
/var/spool/postfix/**
"""


def rsync(src_host, src_port, src_dir, dest_dir, extra_excludes):
    args_prefix = 'rsync', '-aqH', '--no-compress', '-e', 'ssh -p ' + str(src_port)
    args_suffix = '--delete-during', '--delete-excluded', '--ignore-errors', \
        '--force', '--numeric-ids', '--timeout=3600', src_host + ':' + src_dir, dest_dir
    built_in_excludes = parse_exclude_conf(BUILT_IN_EXCLUDES_CONFIG, 'built-in excludes')
    excludes = built_in_excludes + extra_excludes
    args_excludes = list()
    for entry in excludes:
        args_excludes.append('--exclude')
        args_excludes.append(entry)
    args = list(args_prefix) + args_excludes + list(args_suffix)
    execute_or_warning(*args)


#######################################################################################################################


def os_path_concat(prefix, absolute_path):
    if absolute_path[0] != '/':
        raise ValueError('unexpected value of absolute_path: %s' % absolute_path)
    elif prefix is None:
        return absolute_path
    elif prefix[0] != '/':
        raise ValueError('unexpected value of prefix: %s' % prefix)
    else:
        return os.path.join(prefix, absolute_path[1:])


def parse_exclude_conf(config, description):
    excludes = list()
    for line in config.split('\n'):
        line = line.strip()
        if line == '':
            continue
        elif line[0] == '#':
            continue
        elif line[0] != '/':
            print 'WARNING: unexpected excludes.conf line "%s" from %s' % (line, description)
        else:
            excludes.append(line)
    return excludes


EXCLUDE_CONF_ABSOLUTE_PATH = '/etc/autobackup/exclude.conf'


def get_excludes_from_remote_host(host, port, prefix, description):
    exclude_conf = os_path_concat(prefix, EXCLUDE_CONF_ABSOLUTE_PATH)
    command = '"if [ -f ' + exclude_conf + ' ] ; then cat ' + exclude_conf + ' ; fi"'
    args = 'ssh', '-p', str(port), host, '/bin/sh', '-c', command
    stdoutdata, dummy_stderrdata = execute_or_exit(*args)
    return parse_exclude_conf(stdoutdata, description)


#######################################################################################################################


def etc_backup(host, port, dataset, mountpoint, save):
    start = datetime.datetime.now()
    syslog.syslog("etc " + host + ':' + str(port) + " started")
    extra_excludes = get_excludes_from_remote_host(host, port, None, 'host ' + host + ':' + str(port))
    rsync(host, port, '/etc', mountpoint, extra_excludes)
    rsync(host, port, '/opt', mountpoint, extra_excludes)
    zfs_create_snapshot(dataset)
    zfs_delete_old_snapshots(dataset, save)
    end = datetime.datetime.now()
    syslog.syslog("etc " + host + ':' + str(port) + " finished, " + str(end - start).split('.')[0])


def raw_backup(host, port, dataset, mountpoint, save):
    start = datetime.datetime.now()
    syslog.syslog("raw " + host + ':' + str(port) + " started")
    extra_excludes = get_excludes_from_remote_host(host, port, None, 'host ' + host + ':' + str(port))
    rsync(host, port, '/', mountpoint, extra_excludes)
    zfs_create_snapshot(dataset)
    zfs_delete_old_snapshots(dataset, save)
    end = datetime.datetime.now()
    syslog.syslog("raw " + host + ':' + str(port) + " finished, " + str(end - start).split('.')[0])


def ovz_backup(host, port, dataset, mountpoint, save):
    start = datetime.datetime.now()
    syslog.syslog("ovz " + host + ':' + str(port) + " started")
    containers = vzlist(host, port)
    for ctid, layout in containers.items():
        if layout == 'ploop':
            backup_ploop_container(host, port, ctid, mountpoint)
        else:
            print "container '%s' at %s:%s has unsupported layout type '%s', can't backup it" % (ctid, host, str(port), layout)
    backup_hardware_node(host, port, mountpoint)
    delete_orphan_backups(containers, mountpoint)
    zfs_create_snapshot(dataset)
    zfs_delete_old_snapshots(dataset, save)
    print_containers_with_snapshots(host, port, containers)
    compact_all_ploop_containers(host, port, containers)
    end = datetime.datetime.now()
    syslog.syslog("ovz " + host + ':' + str(port) + " finished, " + str(end - start).split('.')[0])


#######################################################################################################################


def main():
    parser = argparse.ArgumentParser(prog='autobackup')
    parser.add_argument('--host', required=True, help="remote host to backup it on ZFS", metavar='HOST')
    parser.add_argument('--port', required=False, help="remote port to backup it on ZFS", metavar='PORT', type=int, default=22)
    parser.add_argument('--type', required=True, help="remote host type: etc, raw, ovz", metavar='TYPE', choices=['etc', 'raw', 'ovz'])
    parser.add_argument('--dest', required=True, help="backup destination on local ZFS", metavar='PATH')
    parser.add_argument('--save', required=True, help="count of saved backup snapshots", metavar='COUNT', type=int)
    args = parser.parse_args()
    if args.port < 1 or args.port > 65535:
        print "unexpected --port value '%s', it must be between 1 and 65535" % str(args.port)
        sys.exit(1)
    if args.save < 1 or args.save > 90:
        print "unexpected --save value '%s', it must be between 1 and 90" % str(args.save)
        sys.exit(1)
    args.dest = os.path.abspath(args.dest)
    zfs = zfs_list_datasets()
    if args.dest not in zfs:
        print "unexpected --dest value '%s', it must be dedicated ZFS filesystem mountpoint" % args.dest
        sys.exit(1)
    if args.type == 'etc':
        etc_backup(host=args.host, port=args.port, dataset=zfs[args.dest], mountpoint=args.dest, save=args.save)
    elif args.type == 'raw':
        raw_backup(host=args.host, port=args.port, dataset=zfs[args.dest], mountpoint=args.dest, save=args.save)
    elif args.type == 'ovz':
        ovz_backup(host=args.host, port=args.port, dataset=zfs[args.dest], mountpoint=args.dest, save=args.save)
    else:
        print "unexpected --type value '%s', it must be 'etc', 'raw' or 'ovz'" % args.type
        sys.exit(1)


if __name__ == "__main__":
    main()
