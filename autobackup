#!/usr/bin/python

""" 
 # /opt/autobackup/autobackup --host=10.0.2.5 --type=ovz --dest=/tank/backup/10.0.2.5 --save=30 
 # /opt/autobackup/autobackup --host=10.0.2.5 --type=raw --dest=/tank/backup/test --save=30 
"""

import sys, os, os.path, subprocess, argparse, datetime, uuid

def execute(args):
    process = subprocess.Popen(args, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True, cwd='/')
    stdoutdata, stderrdata = process.communicate()
    return process.returncode, stdoutdata, stderrdata

def execute_or_exit(args):
    returncode, stdoutdata, stderrdata = execute(args)
    if returncode != 0:
        print "fatal error: execute(", args,") failed"
        print "returncode:", returncode
        print "stdout:", stdoutdata
        print "stderr:", stderrdata
        sys.exit(1)
    return stdoutdata, stderrdata

def execute_or_warning(args):
    returncode, stdoutdata, stderrdata = execute(args)
    if stdoutdata != '' or stderrdata !='':
        print "execute(", args,") failed"
        print "returncode:", returncode
        print "stdout:", stdoutdata
        print "stderr:", stderrdata

def zfs_list_datasets():
    args = 'zfs', 'list', '-H', '-o', 'name,mountpoint'
    stdoutdata, stderrdata = execute_or_exit(args)
    zfs = dict()
    for line in stdoutdata.split('\n'):
        if line == '':
            continue
        name, mountpoint = line.split('\t')
        zfs[mountpoint] = name
    return zfs

def zfs_list_snapshots(dataset):
    args = 'zfs', 'list', '-t', 'snap', '-H', '-o', 'name'
    stdoutdata, stderrdata = execute_or_exit(args)
    prefix = dataset + '@'
    snapshots = list()
    for line in stdoutdata.split('\n'):
        if line.startswith(prefix):
            snapshots.append(line)
    return sorted(snapshots, reverse=True)

def create_snapshot(dataset):
    args = 'zfs', 'snapshot', dataset + '@' + datetime.datetime.now().strftime('autobackup.%Y-%m-%d.%H:%M:%S')
    execute_or_exit(args)

def delete_snapshot(snapshot):
    args = 'zfs', 'destroy', snapshot
    execute_or_exit(args)

def delete_old_snapshots(dataset, save):
    for snapshot in zfs_list_snapshots(dataset)[save:]:
        delete_snapshot(snapshot)

def list_containers(host):
    args = 'ssh', host, 'vzlist', '-a', '-H', '-o', 'uuid,name'
    stdoutdata, stderrdata = execute_or_exit(args)
    containers = dict()
    for line in stdoutdata.split('\n'):
        if line == '':
            continue
        ctid = line[0:36]
        name = line[36:].strip()
        containers[ctid]=name
    return containers

def prepare_local_dirs(by_ctid_path, by_name_path):
    def makedirs(path):
        try:
            os.makedirs(path)
        except OSError:
            pass
    makedirs(by_ctid_path)
    makedirs(os.path.dirname(by_name_path))
    os.symlink(by_ctid_path, by_name_path)

def backup_hardware_node(host, mountpoint):
    by_ctid_path = os.path.join(mountpoint,'by-ctid', '0')
    by_name_path = os.path.join(mountpoint,'by-name', 'hardware-node')
    prepare_local_dirs(by_ctid_path, by_name_path)
    rsync(host, '/', by_ctid_path)

def backup_container(host, ctid, name, mountpoint):
    snid = str(uuid.uuid4())
    path = os.path.join('/tmp/autobackup', snid)
    by_ctid_path = os.path.join(mountpoint,'by-ctid', ctid)
    by_name_path = os.path.join(mountpoint,'by-name', name)
    execute_or_exit(['ssh', host, 'mkdir', '-p', path])
    execute_or_exit(['ssh', host, 'vzctl', 'snapshot', ctid, '--id', snid])
    execute_or_exit(['ssh', host, 'vzctl', 'snapshot-mount', ctid, '--id', snid, '--target', path])
    prepare_local_dirs(by_ctid_path, by_name_path)
    rsync(host, path+'/', by_ctid_path)
    execute_or_exit(['ssh', host, 'vzctl', 'snapshot-umount', ctid, '--id', snid])
    execute_or_exit(['ssh', host, 'vzctl', 'snapshot-delete', ctid, '--id', snid])
    execute_or_exit(['ssh', host, 'rmdir', path])

def rsync(src_host, src_dir, dest_dir):
    args = 'rsync', '-aqH', '--exclude', '/dev/**', '--exclude', '/proc/**', '--exclude', '/sys/**', \
        '--exclude', '/run/**', '--exclude', '/tmp/**', '--exclude', '/vz/**', '--delete-during', \
        '--delete-excluded', '--ignore-errors', '--force', '--numeric-ids', '--timeout=60', \
        src_host+':'+src_dir, dest_dir
    execute_or_warning(args)

def raw_backup(host, dataset, mountpoint, save):
    rsync(host, '/', mountpoint)
    create_snapshot(dataset)
    delete_old_snapshots(dataset, save)

def ovz_backup(host, dataset, mountpoint, save):
    for ctid, name in list_containers(host).items():
        backup_container(host, ctid, name, mountpoint)
    backup_hardware_node(host, mountpoint)
    create_snapshot(dataset)
    delete_old_snapshots(dataset, save)

def main():
    parser = argparse.ArgumentParser(prog='autobackup')
    parser.add_argument('--host', required=True, help="remote host to backup", metavar='HOST')
    parser.add_argument('--type', required=True, help="remote host type", choices=['raw', 'ovz'])
    parser.add_argument('--dest', required=True, help="backup destination on local ZFS", metavar='PATH')
    parser.add_argument('--save', required=True, help="count of saved backup snapshots", type=int, metavar='COUNT')
    args = parser.parse_args()
    if args.save < 1 or args.save > 365:
        raise ValueError("bad --save value, must be between 1 and 365")
    args.dest = os.path.abspath(args.dest)
    zfs = zfs_list_datasets()
    if args.dest not in zfs:
        raise ValueError("bad --dest value, dataset mountpoint must exists")
    if args.type == 'raw':
        raw_backup(host=args.host, dataset=zfs[args.dest], mountpoint=args.dest, save=args.save)
    elif args.type == 'ovz':
        ovz_backup(host=args.host, dataset=zfs[args.dest], mountpoint=args.dest, save=args.save)
    else:
        raise ValueError("unexpected --type value, must be 'raw' or 'ovz'")

if __name__=="__main__":
    main()

"""

https://openvz.org/Ploop/Backup

File-based backup

Assuming you have a running container identified by $CTID. The following needs to be done:

# Known snapshot ID
ID=$(uuidgen)

# Directory used to mount a snapshot
MNTDIR=./mnt
mkdir $MNTDIR

# Take a snapshot without suspending a CT and saving its config
vzctl snapshot $CTID --id $ID --skip-suspend --skip-config

# Mount the snapshot taken
vzctl snapshot-mount $CTID --id $ID --target $MNTDIR

# Perform a backup using your favorite backup tool
# (tar is just an example)
tar cf backup.tar $MNTDIR

# tar with compression examples, see man page of tar for more options
# tar cfJ backup.tar.xz $MNTDIR
# tar cfz backup.tar.gz $MNTDIR

# Unmount the snapshot
vzctl snapshot-umount $CTID --id $ID

# Delete (merge) the snapshot
vzctl snapshot-delete $CTID --id $ID

"""

